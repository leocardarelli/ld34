<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_food</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
//food_image = irandom(image_number);
image_index = irandom(4);
food_points = 0;
sizing = 0;
digest_speed = 0;
bite_speed = 0;
digest_time = 0;
digest = 0;

/*alimentos*/

//0 nulo
if (image_index == 0)
{
instance_destroy();
}

//1 ABACATE
if (image_index == 1)
{
show_debug_message("jejej");
 food_points = 3000;
 sizing = -0.002;

 digest_time = 40;
 digest_speed = 0;
 bite_speed = 0;
}

//2 BANANA
if (image_index == 2)
{
 food_points = 300;
 sizing = -0.005;

 digest_time = 50;
 digest_speed = 0;
 bite_speed = 0;
}

//3 NOODLES
if (image_index == 3)
{
  food_points = 1000;
  sizing = 0.004;

  digest_time = 55;
  digest_speed = 0.2;
  bite_speed = -20;
}

//4 MILK
if (image_index == 4)
{
  food_points = 0;
  sizing = 0;

  digest_time = 45;
  digest_speed = -0.05;
  bite_speed = -30;
}
//5 BUTTER
if (image_index == 5)
{
  food_points = 0;
  sizing = 0;

}
//6 PIRULITO
if (image_index == 6)
{
  food_points = 0;
  sizing = 0;

}
//7 ARROZ
if (image_index == 7)
{
  food_points = 0;
  sizing = 0;

}
//8 COGUMELO
if (image_index == 8)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//9 NESCAU
if (image_index == 9)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//10 TOAST
if (image_index == 10)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//11 POTATO
if (image_index == 11)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//12 PUMPKIN
if (image_index == 12)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//13 HAMBURGER
if (image_index == 13)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//14 PIE
if (image_index == 14)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//15 RIBS
if (image_index == 15)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//16 ONION
if (image_index == 16)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//17 CENOURAS
if (image_index == 17)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//18 ABACAXI
if (image_index == 18)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//19 CUPCAKE
if (image_index == 19)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//20 CHOCOLATE
if (image_index == 20)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//21 YOGURT
if (image_index == 21)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//22 PEIXE
if (image_index == 22)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//23 CORDEIRO
if (image_index == 23)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//24 COKE
if (image_index == 24)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//25 LEITE MOCA
if (image_index == 25)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//26 JUJUBAS
if (image_index == 26)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//27 BEANS
if (image_index == 27)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//28 GRAPES
if (image_index == 28)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//29 LINGUICAS
if (image_index == 29)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//30 CHEESE
if (image_index == 30)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//31 PORK
if (image_index == 31)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//32 TOMATE
if (image_index == 32)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//33 SAKE
if (image_index == 33)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//34 PIMENTAO
if (image_index == 34)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//35 AGUA
if (image_index == 35)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//36 FRANGO
if (image_index == 36)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//37 STEAK
if (image_index == 37)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//38 MORANGO
if (image_index == 38)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//39 TOFU DOG
if (image_index == 39)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//40 MACA
if (image_index == 40)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//41 TOFU STICK
if (image_index == 41)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}
//42 SHRIMP
if (image_index == 42)
{
  food_points = 0;
  sizing = 0;
  digest = 0;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if(place_meeting(x, y+16, obj_food_count))
{
obj_lixo.y = obj_lixo.y - 3;
obj_food_count.food_count = obj_food_count.food_count + 1;
instance_destroy();
}

//ENGOLIR COMIDA LADO ESQUERDO/DIREITO

if(place_meeting(x, y+16, obj_boca_l))
{
    if (keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right)&amp;&amp; vomiting == false)
    {
        if (munch == false)
        {
            points = food_points + points;
            obj_char1.growth = obj_char1.growth + sizing;
            munch = true;
            obj_bar.vomit_limit =  obj_bar.vomit_limit + digest_time;
            obj_bar.digest_multiplier = obj_bar.digest_multiplier + digest_speed;
            obj_global.munch_multiplier = obj_global.munch_multiplier + bite_speed;
            if (munch == true)
            {
            show_debug_message("gjjgj");
            obj_global.alarm[0] = munch_time;
            }
            instance_destroy();
        }
    }
}
if(place_meeting(x, y+16, obj_boca_r))
{
    if (keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_left)&amp;&amp; vomiting == false)
    {
        if (munch == false)
        {
            points = food_points + points;
            obj_char1.growth = obj_char1.growth + sizing;
            munch = true;
            obj_bar.vomit_limit =  obj_bar.vomit_limit + digest_time;
            obj_bar.digest_multiplier = obj_bar.digest_multiplier + digest_speed;
            if (munch == true)
            {
            show_debug_message("gjjgj");
            obj_global.alarm[0] = munch_time;
            }
            instance_destroy();
        }
    }
}

//VELOCIDADE HORIZONTAL TOCANDO A ESTEIRA
if(place_meeting(x, y-8, obj_esteira_l))
{
hspeed = 2;
}
if(place_meeting(x, y-8, obj_esteira_r))
{
hspeed = -2;
}

if (place_meeting(x, y+vspeed, obj_block))
{
    while(!place_meeting(x, y+sign(vspeed), obj_block))
    {
        y += sign(vspeed);
    }
    vspeed = 0;
    gravity = 0;
}
else
{
//vspeed = 2;
gravity = 1.5;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
